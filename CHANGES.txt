0.1a2->0.1a3
* Added/Fixed copy on array (D. Lemire)
* Improved documentation concerning usage in jEdit
* Improved file layout
* Improved makefile
* Fixed implementation of Unary functions (will now convert to double)
* Hacked a problem with printing complex numbers
0.1a1->0.1a2:
* Added copy=1/0 argument to array
* fixed Ellipses bug.
* fixed __setitem__ bug (which fixed concatenate bug)
* fixed choose.
* fixed operations (add, etc.) on arrays of objects.
* implemented special purpose get and set
* sped up special case of array(PyArrayObject)
* started to fix ufuncs for speed (add.accumulate only).
0.1a2->01.a3
* Added copyAToB and used to increase array copy speed.
* Added astype()
* added tostring() and fromstring().
* added byteswapped().
* added tolist().
* fixed reduce for speed.
* Added reduceat
* Sped up more of the ufuncs.
* added outer.
* Faked three argument ufuncs (full fix waiting on three argument add, etc.)
* added innerproduct.
* added convolve (My results don't match those of cnumeric, but may (are?) be correct).
* lots and lots of clean up.
* added unaryUfuncs.
* repackaged.
0.1a3->01.a4
* Fixed complex division bug.
* Finished adding ufuncs and __x__ operations.
* Removed Precision.py -- unecesarry in Java.
* Added support for subclassing.
0.1a4->01.a5
* Added the Matrix module (more as an example of subclassing than anything else).
* Moved ArrayRange to PyMultiarray
* Changed behaviour of innerproduct/dot.
* Fixed indices.
* Moved resize to PyMultiarray.
* Moved Searchsorted to PyMultiarray.
* Moved indices and fromFunction to java. 
* Fixed broadcasting bug.
0.1a5->0.1a6
* Added pi and e to __init__
* Fixed bug where zero sized array still had one element.
* Fixed absComplexDouble
* Added complex support to add.reduce.
* Fixed broadcasting again (was broadcasting in reverse order).
* Added rmod.
* Fixed choose bug (didn't work with matrices with nonzero starts.).
* Fixed bug in accumulate and reduce on complex numbers for nonzeros axes.
* Fixed buglet in complexAdd and complexSub where args were coerced to float
  accuracy was lost. 
* Restructured package.
0.1a6->0.1a7
* Fixed broadcasting again!
* Fixed innerProduct bug.
* Fixed rotateAxes bug.
* Seperated dot and innerproduct and made innerproduct match CNumeric behaviour. 
* Sped up most __X__ ops and add ufunc.
0.1a7->0.1a8
* Moved creation of Unary and Binary functions out of umath so javc would stop complaining.
* Simplified argMax / argMin
* Added complex support and sped up subtract and multiply reduce/accumulate. 
0.1a8->0.1a9
* Ooops! Forgot to keep track!!
0.1a9->0.1b1
*Fixed bug in minimum/maximum.reduce (was using 1 as starting # for some cases).
0.1b1->0.2a1
* Now requires java 1.2 (AKA java 2)
* Implemented search / search sorted in Java.
* Moved all code to java for ease of install and (maybe) speed.
* separated dot and innerproduct so that innerproduct behaves as in CNumeric.
0.2a1->0.2a2
* added copy keyword to array
* fixed potential bugs in KeywordFunction (changed __call__ to _call)
* fixed bug in asarray - was always copying when type unspecified.
* typecode=None now allowed in Numeric functions. 
* fixed bug in binary ufuncs, didn't work on some nonarrays (e.g., lists)
* fixed indexing bug for negative steps, revealed by JPython1.1b1
0.2a2->0.2a3
* refixed bug binary ufuncs -- previous fix disapeared.
0.2a3->0.2a4
* added doc strings to unary ufuncs.
* added overflow checks and negative power checks to integer operations (from CNumeric).
* added support for byte ('1').
0.2a4->0.2a5
* fixed bug in reduce/accumulate that swapped axes if there were more than 2
* added ceil and floor to UnaryUfunc
0.2a5->0.2a6
* fixed bug in logical_or.reduce
* changed (secret) FFT module so that it can be accessed using import FFT as well as JNumeric.FFT
* fixed bug in printing complex arrays.
* fixed tostring and fromstring to work with complex arrays
* fixed tostring and fromstring to use iso-latin-1 encoding.
* fixed setting of imag/imaginary and real
* Added special cases of array to efficiently create arrays from jarrays (really PyArrays)
* Changed __call__ signature of Binary ufuncs to avoid weird problem with three argument calls.
* Changed astype to not make a copy when types match (matches the behaviour of asarray).
0.2a6->0.2b1
* Made special case handle multidimensional jarrays gracefully and quickly
* fixed error reporting in PyMultiarray.objectToJava.
* fixed bug where too many arguments were passed to a KeywordFunction
* Removed lines from BinaryFunctions' call methods that were causing problems with scalar args.

